"""
HorizontAI - An√°lisis Pol√≠tico Local de Mar√≠n (CORREGIDO - CRITERIOS UNIFICADOS + FONDOS ESPEC√çFICOS)
=================================================================================

üîß CORRECCI√ìN FINAL: Unificar criterios para art√≠culos pol√©micos entre an√°lisis
con y sin sentimientos para obtener resultados consistentes.

üé® NUEVO: Fondos espec√≠ficos para an√°lisis de comentarios y visualizaciones.
üìÅ SOPORTE: Im√°genes en formato .jpg y .png seg√∫n disponibilidad.
üîÑ AMPLIADO: Partidos/pol√≠ticos funcionan en comentarios Y visualizaciones.
üìà INCLUIDO: Art√≠culos m√°s Populares con fondo Popularidad.png.
"""

import streamlit as st
import pandas as pd
import nest_asyncio
import os
nest_asyncio.apply()
os.environ["STREAMLIT_USE_WATCHMAN"] = "false"

# Importar m√≥dulos utils
try:
    from utils.data_loaders import cargar_metricas, cargar_datos_comentarios, cargar_datos_comentarios_morrazo, cargar_datos_comentarios_marin
    from utils.data_processors import (
        procesar_articulos_polemicos, 
        procesar_articulos_polemicos_UNIFICADO,  # üîß FUNCI√ìN UNIFICADA
        procesar_comentarios_populares, 
        procesar_comentarios_impopulares, 
        aplicar_filtros_temporales,
        obtener_articulos_polemicos_unificado  # üîß FUNCI√ìN BASE UNIFICADA
    )
    from utils.political_comment_processors import (
        filtrar_comentarios_por_partidos_general,
        filtrar_comentarios_por_psoe,
        filtrar_comentarios_por_pp,
        filtrar_comentarios_por_bng,
        filtrar_comentarios_por_politicos_general,
        filtrar_comentarios_por_manuel_pazos,
        filtrar_comentarios_por_maria_ramallo,
        filtrar_comentarios_por_lucia_santos,
        procesar_comentarios_politicos_populares,
        procesar_comentarios_politicos_impopulares,
        procesar_articulos_politicos_polemicos
    )
    from utils.comment_sentiment_processors import (
        extraer_comentarios_para_analisis,
        resumir_sentimientos_por_articulo
    )
    from utils.sentiment_integration import (
        cargar_analizador_sentimientos, 
        inicializar_analizador,
        aplicar_analisis_sentimientos,
        mostrar_analisis_sentimientos_compacto,
    )
    from utils.visualizers import (
        mostrar_tabla_con_detalles_y_sentimientos,  # üîß PARA VISUALIZACIONES
        mostrar_tabla_articulos_polemicos, 
        mostrar_tabla_comentarios,
        mostrar_seccion_temporal,
        mostrar_seccion_comentarios_temporal,
        mostrar_tabla_comentarios_con_sentimientos,
        mostrar_explicacion_parametros,
        mostrar_tabla_articulos_agregados_con_sentimientos
    )
    # üé® NUEVO: Importar m√≥dulo CSS
    from utils.css_styles import (
        aplicar_css_principal,
        aplicar_fondo_inicio,
        aplicar_fondo_comentarios_especifico,
        eliminar_fondo_inicio
    )
except ImportError as e:
    st.error(f"‚ùå Error importando m√≥dulos: {e}")
    st.error("üîß Aseg√∫rate de que todos los archivos est√°n en la carpeta 'utils/'")
    st.stop()

def obtener_fondo_segun_opcion(tipo_analisis, partido_especifico=None, politico_especifico=None):
    """Determina qu√© fondo aplicar seg√∫n las opciones seleccionadas"""
    
    if tipo_analisis == "üìä An√°lisis General":
        return "Analisis.png"                     # Todos los archivos son PNG
    
    elif tipo_analisis == "üó≥Ô∏è Comentarios sobre Partidos Pol√≠ticos":
        mapeo_fondos_partidos = {
            "Todos los partidos": "Todos-partidos.png",    
            "üåπPSdeG-PSOE de Mar√≠n": "PSOE-Partido.png",     
            "üîµPartido Popular de Mar√≠n": "PP-Partido.jpg",  
            "üåÄBNG - Mar√≠n": "BNG-Partido.png"               
        }
        return mapeo_fondos_partidos.get(partido_especifico)
    
    elif tipo_analisis == "üë• Comentarios sobre Pol√≠ticos Locales":
        mapeo_fondos_politicos = {
            "Todos los pol√≠ticos": "Todos-candidatos.png",   
            "üåπManuel Pazos": "PSOE-Partido.png",              
            "üîµMar√≠a Ramallo": "PP-Partido.jpg",               
            "üåÄLuc√≠a Santos": "BNG-Partido.png"                
        }
        return mapeo_fondos_politicos.get(politico_especifico)
    
    # Fondos para An√°lisis de Visualizaciones - Todos los archivos son PNG
    elif tipo_analisis == "üìà Art√≠culos m√°s Populares":
        return "Popularidad.png"                            
    
    elif tipo_analisis == "üèõÔ∏è Art√≠culos sobre Partidos Pol√≠ticos":
        mapeo_fondos_partidos_vis = {
            "Todos los partidos": "Todos-partidos.png",    
            "üåπPSdeG-PSOE de Mar√≠n": "PSOE-Partido.png",     
            "üîµPartido Popular de Mar√≠n": "PP-Partido.jpg",  
            "üåÄBNG - Mar√≠n": "BNG-Partido.png"               
        }
        return mapeo_fondos_partidos_vis.get(partido_especifico)
    
    elif tipo_analisis == "üë• Art√≠culos sobre Pol√≠ticos Locales":
        mapeo_fondos_politicos_vis = {
            "Todos los pol√≠ticos": "Todos-candidatos.png",  
            "üåπManuel Pazos": "PSOE-Partido.png",             
            "üîµMar√≠a Ramallo": "PP-Partido.jpg",              
            "üåÄLuc√≠a Santos": "BNG-Partido.png"               
        }
        return mapeo_fondos_politicos_vis.get(politico_especifico)
    
    return None

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="HorizontAI",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# üé® MODULARIZADO: Aplicar CSS principal
aplicar_css_principal()

# Inicializaci√≥n de variables globales
SENTIMENTS_AVAILABLE = False
AnalizadorArticulosMarin = None
analizar_articulos_marin = None
mensaje_carga = ""

# Cargar analizador de sentimientos al inicio
try:
    with st.spinner("üß† Cargando sistema de an√°lisis de sentimientos..."):
        AnalizadorArticulosMarin, analizar_articulos_marin, mensaje_carga = cargar_analizador_sentimientos()
        SENTIMENTS_AVAILABLE = (AnalizadorArticulosMarin is not None)
except Exception as e:
    SENTIMENTS_AVAILABLE = False
    mensaje_carga = f"‚ùå Error cargando analizador: {e}"

# Inicializar session_state para analizador global
if 'analizador_global' not in st.session_state:
    st.session_state.analizador_global = None

def get_analizador_global():
    """Obtiene el analizador global reutilizable"""
    if not SENTIMENTS_AVAILABLE:
        return None
        
    if st.session_state.analizador_global is None:
        try:
            with st.spinner("üß† Inicializando analizador de sentimientos..."):
                st.session_state.analizador_global = inicializar_analizador(AnalizadorArticulosMarin)
                if st.session_state.analizador_global is None:
                    st.error("‚ùå Error inicializando analizador global")
                    return None
        except Exception as e:
            st.error(f"‚ùå Error inicializando analizador: {e}")
            return None
    
    return st.session_state.analizador_global


def procesar_comentarios_con_sentimientos_directo(df, analizador, top_n=20, filtro_popularidad=None):
    """
    üîß VERSI√ìN UNIFICADA CORREGIDA: Usa exactamente la misma l√≥gica que la funci√≥n sin analizador
    """
    
    if analizador is None:
        st.warning("‚ö†Ô∏è Analizador no disponible")
        return pd.DataFrame(), None, pd.DataFrame()
    
    # üîß CLAVE: Usar funci√≥n unificada para obtener art√≠culos pol√©micos
    if filtro_popularidad is None:  # Solo para art√≠culos pol√©micos
        # Usar EXACTAMENTE la misma l√≥gica que la funci√≥n sin analizador
        df_articulos_polemicos = obtener_articulos_polemicos_unificado(df, top_n)
        
        if len(df_articulos_polemicos) == 0:
            st.warning("‚ö†Ô∏è No se encontraron art√≠culos pol√©micos")
            return pd.DataFrame(), None, pd.DataFrame()
        
        # Extraer comentarios SOLO de estos art√≠culos pol√©micos
        df_comentarios_completos = extraer_comentarios_para_analisis(df_articulos_polemicos)
        
        # Para art√≠culos pol√©micos, usar TODOS los comentarios de los art√≠culos seleccionados
        df_comentarios_filtrados = df_comentarios_completos.copy()
        
    else:
        # Para comentarios populares/impopulares, usar l√≥gica anterior
        df_comentarios_completos = extraer_comentarios_para_analisis(df)
        
        if len(df_comentarios_completos) == 0:
            st.warning("‚ö†Ô∏è No se encontraron comentarios para analizar")
            return pd.DataFrame(), None, pd.DataFrame()

        # Aplicar filtros de popularidad
        df_comentarios_filtrados = df_comentarios_completos.copy()
        
        if filtro_popularidad == 'popular':
            df_comentarios_filtrados = df_comentarios_filtrados[df_comentarios_filtrados['likes'] > df_comentarios_filtrados['dislikes']]
            df_comentarios_filtrados = df_comentarios_filtrados.sort_values('net_score', ascending=False)
        elif filtro_popularidad == 'impopular':
            df_comentarios_filtrados = df_comentarios_filtrados[df_comentarios_filtrados['dislikes'] > df_comentarios_filtrados['likes']]
            df_comentarios_filtrados = df_comentarios_filtrados.sort_values('net_score', ascending=True)
        
        # Limitar a top_n comentarios
        df_comentarios_filtrados = df_comentarios_filtrados.head(top_n)
    
    # Verificar que hay comentarios filtrados para analizar
    if len(df_comentarios_filtrados) == 0:
        st.warning(f"‚ö†Ô∏è No hay comentarios {filtro_popularidad} para analizar")
        return pd.DataFrame(), None, df_comentarios_completos
    
    # Aplicar an√°lisis de sentimientos
    try:
        df_analizado, reporte = aplicar_analisis_sentimientos(df_comentarios_filtrados, analizador)
        if df_analizado is None or len(df_analizado) == 0:
            st.error("‚ùå El an√°lisis de sentimientos no devolvi√≥ datos")
            return df_comentarios_filtrados, None, df_comentarios_completos
                
        # Resumir por art√≠culo
        df_resumido = resumir_sentimientos_por_articulo(df_analizado)
        
        # üîß ASEGURAR ORDENAMIENTO FINAL por n√∫mero de comentarios (igual que sin analizador)
        if len(df_resumido) > 0 and filtro_popularidad is None:
            # A√±adir informaci√≥n de n√∫mero de comentarios del df original
            if hasattr(df_articulos_polemicos, '__len__') and len(df_articulos_polemicos) > 0:
                try:
                    mapping_comentarios = dict(zip(df_articulos_polemicos['title'], df_articulos_polemicos['n_comments']))
                    df_resumido['n_comments'] = df_resumido['title'].map(mapping_comentarios).fillna(0)
                    # Ordenar por n√∫mero de comentarios descendente (mismo criterio)
                    df_resumido = df_resumido.sort_values('n_comments', ascending=False)
                except:
                    # Si el mapeo falla, mantener orden existente
                    pass
        
        return df_resumido, reporte, df_comentarios_completos
        
    except Exception as e:
        st.error(f"‚ùå Error aplicando an√°lisis de sentimientos: {e}")
        return df_comentarios_filtrados, None, df_comentarios_completos
            
def procesar_comentarios_individuales_con_sentimientos(df, analizador, top_n=20, filtro_popularidad=None):
    """
    NUEVA FUNCI√ìN: Para comentarios individuales con an√°lisis de sentimientos completo
    
    Procesa comentarios individuales y genera tabla con an√°lisis detallado para cada comentario.
    NO agrega por art√≠culo - mantiene comentarios separados con su an√°lisis individual.
    
    Args:
        df: DataFrame con art√≠culos y comentarios
        analizador: Instancia del analizador de sentimientos
        top_n: N√∫mero de comentarios top para an√°lisis
        filtro_popularidad: 'popular', 'impopular' o None
        
    Returns:
        tuple: (df_comentarios_analizados, reporte)
            - df_comentarios_analizados: DataFrame con comentarios y an√°lisis individual
            - reporte: Reporte de an√°lisis de sentimientos
    """
    if analizador is None:
        st.warning("‚ö†Ô∏è Analizador no disponible")
        return pd.DataFrame(), None
    
    # 1. Extraer TODOS los comentarios individuales
    df_comentarios = extraer_comentarios_para_analisis(df)
    
    if len(df_comentarios) == 0:
        st.warning("‚ö†Ô∏è No se encontraron comentarios para analizar")
        return pd.DataFrame(), None
    
    # 2. Aplicar filtros de popularidad
    if filtro_popularidad == 'popular':
        df_comentarios = df_comentarios[df_comentarios['likes'] > df_comentarios['dislikes']]
        df_comentarios = df_comentarios.sort_values('net_score', ascending=False)
    elif filtro_popularidad == 'impopular':
        df_comentarios = df_comentarios[df_comentarios['dislikes'] > df_comentarios['likes']]
        df_comentarios = df_comentarios.sort_values('net_score', ascending=True)
    else:
        # Para art√≠culos pol√©micos: ordenar por valor absoluto del net_score
        df_comentarios['abs_net_score'] = abs(df_comentarios['net_score'])
        df_comentarios = df_comentarios.sort_values('abs_net_score', ascending=False)
    
    # 3. Limitar a top_n comentarios
    df_comentarios = df_comentarios.head(top_n)
    
    if len(df_comentarios) == 0:
        st.warning(f"‚ö†Ô∏è No hay comentarios {filtro_popularidad} para analizar")
        return pd.DataFrame(), None
    
    # 4. Aplicar an√°lisis de sentimientos a comentarios individuales
    try:
        df_analizado, reporte = aplicar_analisis_sentimientos(df_comentarios, analizador)
        
        if df_analizado is None or len(df_analizado) == 0:
            st.error("‚ùå El an√°lisis de sentimientos no devolvi√≥ datos")
            return df_comentarios, None
        
        # 5. Preparar tabla final con columnas espec√≠ficas solicitadas
        df_tabla_final = df_analizado.copy()
        
        # PRESERVAR TEXTO ORIGINAL ANTES DE TRUNCAR
        df_tabla_final['texto_completo_original'] = df_tabla_final['title'].copy()

        # Columna: Vista previa del comentario (texto truncado)
        df_tabla_final['vista_previa_comentario'] = df_tabla_final['title'].apply(
            lambda x: str(x)[:20] + "..." if len(str(x)) > 20 else str(x)
        )
        
        # Columna: Fecha en formato AAAA-MM-DD
        if 'date' in df_tabla_final.columns:
            df_tabla_final['fecha_formateada'] = pd.to_datetime(df_tabla_final['date']).dt.strftime('%Y-%m-%d')
        else:
            df_tabla_final['fecha_formateada'] = 'No disponible'
        
        # Columna: Ubicaci√≥n del comentario
        df_tabla_final['ubicacion_comentario'] = df_tabla_final.get('comment_location', 'No especificada')
        
        # Columnas de an√°lisis de sentimientos (verificar que existen)
        columnas_sentimientos = ['idioma', 'tono_general', 'emocion_principal', 'intensidad_emocional', 'confianza_analisis']
        for col in columnas_sentimientos:
            if col not in df_tabla_final.columns:
                st.warning(f"‚ö†Ô∏è Columna {col} no encontrada en el an√°lisis")
                df_tabla_final[col] = 'No disponible'
        
        # Columnas de m√©tricas del comentario
        df_tabla_final['likes_comentario'] = df_tabla_final.get('likes', 0)
        df_tabla_final['dislikes_comentario'] = df_tabla_final.get('dislikes', 0)
        
        # Columna: Fuente del art√≠culo
        df_tabla_final['fuente_articulo'] = df_tabla_final.get('source', 'No disponible')
        
        # Columna: Enlace del art√≠culo
        df_tabla_final['enlace_articulo'] = df_tabla_final.get('link', '')
        
        if 'title_original' in df_tabla_final.columns:
            df_tabla_final['titulo_articulo_original'] = df_tabla_final['title_original']
        else:
            df_tabla_final['titulo_articulo_original'] = 'No disponible'

        # Y MODIFICAR columnas_finales para incluir el t√≠tulo del art√≠culo:
        columnas_finales = [
            'vista_previa_comentario',    # Vista previa del comentario
            'texto_completo_original',    # Texto completo del comentario
            'comment_author',             # Autor del comentario
            'titulo_articulo_original',   # T√≠tulo del art√≠culo
            'fecha_formateada',           # Fecha (AAAA-MM-DD)
            'ubicacion_comentario',       # Ubicaci√≥n
            'idioma',                     # Idioma
            'tono_general',               # Tono general
            'emocion_principal',          # Emoci√≥n dominante
            'intensidad_emocional',       # Intensidad
            'tematica',                   # Tem√°tica del comentario
            'likes_comentario',           # Likes
            'dislikes_comentario',        # Dislikes
            'confianza_analisis',         # Confianza en el an√°lisis (0-1)
            'fuente_articulo',            # Fuente
            'enlace_articulo'             # Enlace
        ]
        
        # Verificar que todas las columnas existen (permitir que falte tem√°tica)
        columnas_existentes = [col for col in columnas_finales if col in df_tabla_final.columns]

        # üîß NUEVO: Manejo especial para tem√°tica
        if 'tematica' not in df_tabla_final.columns:
            st.warning("‚ö†Ô∏è Columna tem√°tica no disponible en el an√°lisis")
            columnas_existentes = [col for col in columnas_existentes if col != 'tematica']

        if len(columnas_existentes) < len(columnas_finales) - 1:  # -1 para permitir que falte tem√°tica
            columnas_faltantes = set(columnas_finales) - set(columnas_existentes)
            st.warning(f"‚ö†Ô∏è Algunas columnas no est√°n disponibles: {columnas_faltantes}")

        # 7. Crear DataFrame final con solo las columnas disponibles
        df_resultado = df_tabla_final[columnas_existentes].copy()
        
        return df_resultado, reporte
        
    except Exception as e:
        st.error(f"‚ùå Error aplicando an√°lisis de sentimientos: {e}")
        return df_comentarios, None
    
# Header principal
st.markdown('<h1 class="titulo-sin-linea">üèõÔ∏èHorizontAIüèõÔ∏è</h1>', unsafe_allow_html=True)
st.markdown('<h1 class="titulo-sin-linea">Analizador IA de sentimientos pol√≠ticos</h1>', unsafe_allow_html=True)

# Sidebar con opciones principales
st.sidebar.title("üß≠ Men√∫ principal ‚ÜôÔ∏è")

opciones_principales = [
    "üè† Inicio", 
    "üèòÔ∏è Visi√≥n General del Municipio", 
    "üìä An√°lisis de Visualizaciones", 
    "üí¨ An√°lisis de Comentarios", 
    "üìû Info. T√©cnica y Contacto"
]

opcion = st.sidebar.radio(
    label="Seleccione una opci√≥n:",
    options=opciones_principales,
    format_func=lambda x: x
)

# Configurar submen√∫s seg√∫n la opci√≥n seleccionada
analizador = None

if opcion == "üìä An√°lisis de Visualizaciones":
    st.sidebar.divider()
    st.sidebar.subheader("üîç Tipo de An√°lisis")
    
    sub_opcion = st.sidebar.radio(
        label="Selecciona:",
        options=[
            "üìà Art√≠culos m√°s Populares", 
            "üèõÔ∏è Art√≠culos sobre Partidos Pol√≠ticos", 
            "üë• Art√≠culos sobre Pol√≠ticos Locales"
        ]
    )
        
    if SENTIMENTS_AVAILABLE:
        mostrar_sentimientos = st.toggle(
            "üé≠ Activar an√°lisis de sentimientos y emociones",
            value=False,
            help="Incluye an√°lisis completo: tono, emociones, idioma, tem√°tica, contexto"
        )
        
        if mostrar_sentimientos:
            analizador = get_analizador_global()
            if analizador is None:
                st.error("‚ùå Error con analizador")
                mostrar_sentimientos = False
    else:
        mostrar_sentimientos = False
        st.info("‚ö†Ô∏è An√°lisis de sentimientos no disponible")
    
    # Submen√∫s espec√≠ficos
    if sub_opcion == "üèõÔ∏è Art√≠culos sobre Partidos Pol√≠ticos":
        st.sidebar.subheader("üó≥Ô∏è Partido Espec√≠fico")
        partido_especifico = st.sidebar.radio(
            label="Selecciona:",
            options=[
                "Todos los partidos", 
                "üåπPSdeG-PSOE de Mar√≠n", 
                "üîµPartido Popular de Mar√≠n", 
                "üåÄBNG - Mar√≠n"
            ]
        )
    
    if sub_opcion == "üë• Art√≠culos sobre Pol√≠ticos Locales":
        st.sidebar.subheader("üë§ Pol√≠tico Espec√≠fico")
        politico_especifico = st.sidebar.radio(
            label="Selecciona:",
            options=[
                "Todos los pol√≠ticos", 
                "üåπManuel Pazos", 
                "üîµMar√≠a Ramallo", 
                "üåÄLuc√≠a Santos"
            ]
        )

elif opcion == "üí¨ An√°lisis de Comentarios":
    st.sidebar.divider()
    st.sidebar.subheader("üó∫Ô∏è Ubicaci√≥n Geogr√°fica")
    ubicacion_comentarios = st.sidebar.radio(
        label="Selecciona regi√≥n:",
        options=[
            "üåç Comentarios Globales", 
            "üèõÔ∏è Comentarios de O Morrazo y Pontevedra",
            "üìç Comentarios de Mar√≠n"
        ]
    )
    
    st.sidebar.subheader("üîç Tipo de An√°lisis")
    tipo_analisis_comentarios = st.sidebar.radio(
        label="Selecciona an√°lisis:",
        options=[
            "üìä An√°lisis General",
            "üó≥Ô∏è Comentarios sobre Partidos Pol√≠ticos",
            "üë• Comentarios sobre Pol√≠ticos Locales"
        ]
    )
    
    if SENTIMENTS_AVAILABLE:
        mostrar_sentimientos = st.toggle(
            "üé≠ Activar an√°lisis de sentimientos y emociones",
            value=False,
            help="Incluye an√°lisis emocional de cada comentario individual"
        )
        
        if mostrar_sentimientos:
            analizador = get_analizador_global()
            if analizador is None:
                st.error("‚ùå Error con analizador")
                mostrar_sentimientos = False
    else:
        mostrar_sentimientos = False
        st.info("‚ö†Ô∏è An√°lisis de sentimientos no disponible")

    # DEFINIR VARIABLES POR DEFECTO
    partido_comentarios = "Todos los partidos"
    politico_comentarios = "Todos los pol√≠ticos"

    if tipo_analisis_comentarios == "üó≥Ô∏è Comentarios sobre Partidos Pol√≠ticos":
        st.sidebar.subheader("üó≥Ô∏è Partido Espec√≠fico")
        partido_comentarios = st.sidebar.radio(
            label="Selecciona:",
            options=[
                "Todos los partidos", 
                "üåπPSdeG-PSOE de Mar√≠n", 
                "üîµPartido Popular de Mar√≠n", 
                "üåÄBNG - Mar√≠n"
            ]
        )

    if tipo_analisis_comentarios == "üë• Comentarios sobre Pol√≠ticos Locales":
        st.sidebar.subheader("üë§ Pol√≠tico Espec√≠fico")
        politico_comentarios = st.sidebar.radio(
            label="Selecciona:",
            options=[
                "Todos los pol√≠ticos", 
                "üåπManuel Pazos", 
                "üîµMar√≠a Ramallo", 
                "üåÄLuc√≠a Santos"
            ]
        )

# Funci√≥n auxiliar para mostrar an√°lisis de comentarios
def mostrar_analisis_comentarios_con_filtros(datos_comentarios, titulo_ubicacion, ubicacion_key, mostrar_sentimientos, analizador, tipo_analisis_comentarios, partido_comentarios=None, politico_comentarios=None):    
    """üîß FUNCI√ìN CORREGIDA: Usar criterios unificados para art√≠culos pol√©micos"""
    
    if mostrar_sentimientos:
        st.success("""
        üß† **An√°lisis avanzado de sentimientos en comentarios activado**
        
        Se analizar√° el contenido emocional de cada comentario individual.
        """)

        st.info("""
        ‚ÜñÔ∏è **Para visualizar mejor todas las columnas del an√°lisis, cierra el men√∫ principal**.
        """)
    
    if tipo_analisis_comentarios == "üìä An√°lisis General":
        st.title(f"üí¨ {titulo_ubicacion} - üìä An√°lisis General")
        st.markdown(f"""
        **An√°lisis completo de comentarios** de {titulo_ubicacion.lower()}
        
        üìä Incluye art√≠culos pol√©micos, comentarios populares e impopulares.
        """)
        
        try:
            comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico = aplicar_filtros_temporales(datos_comentarios)
        except Exception as e:
            st.error(f"‚ùå Error aplicando filtros temporales: {e}")
            return
        
        tab1, tab2, tab3 = st.tabs(["üî• Art√≠culos pol√©micos", "üëç Comentarios populares", "üëé Comentarios impopulares"])
        
        with tab1:
            st.subheader(f"üî• Art√≠culos m√°s pol√©micos - {titulo_ubicacion}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            with subtab1:
                if mostrar_sentimientos and analizador is not None:
                    df_resumido, reporte, df_comentarios_originales = procesar_comentarios_con_sentimientos_directo(
                        comentarios_mayo_2025, analizador, top_n=20, filtro_popularidad=None
                    )
                    mostrar_tabla_articulos_agregados_con_sentimientos(
                        df_resumido, 
                        f"Art√≠culos pol√©micos - mayo 2025 ({titulo_ubicacion})", 
                        df_comentarios_originales=df_comentarios_originales,
                        reporte=reporte
                    )
                else:
                    # üîß USAR LA MISMA FUNCI√ìN BASE
                    datos_polemicos = procesar_articulos_polemicos_UNIFICADO(comentarios_mayo_2025)
                    mostrar_tabla_articulos_polemicos(
                        datos_polemicos, 
                        f"mayo de 2025 ({titulo_ubicacion})",
                        key_suffix=f"polemicos_{ubicacion_key}_mes"
                    )
            
            with subtab2:
                if mostrar_sentimientos and analizador is not None:
                    df_resumido, reporte, df_comentarios_originales = procesar_comentarios_con_sentimientos_directo(
                        comentarios_anio_2025, analizador, top_n=20, filtro_popularidad=None
                    )
                    mostrar_tabla_articulos_agregados_con_sentimientos(
                        df_resumido, 
                        f"Art√≠culos pol√©micos - a√±o 2025 ({titulo_ubicacion})", 
                        df_comentarios_originales=df_comentarios_originales,
                        reporte=reporte
                    )
                else:
                    # üîß USAR LA MISMA FUNCI√ìN BASE
                    datos_polemicos = procesar_articulos_polemicos_UNIFICADO(comentarios_anio_2025)
                    mostrar_tabla_articulos_polemicos(
                        datos_polemicos, 
                        f"a√±o 2025 ({titulo_ubicacion})",
                        key_suffix=f"polemicos_{ubicacion_key}_anio"
                    )
            
            with subtab3:
                if mostrar_sentimientos and analizador is not None:
                    df_resumido, reporte, df_comentarios_originales = procesar_comentarios_con_sentimientos_directo(
                        comentarios_historico, analizador, top_n=20, filtro_popularidad=None
                    )
                    mostrar_tabla_articulos_agregados_con_sentimientos(
                        df_resumido, 
                        f"Art√≠culos pol√©micos - hist√≥rico ({titulo_ubicacion})", 
                        df_comentarios_originales=df_comentarios_originales,
                        reporte=reporte
                    )
                else:
                    # üîß USAR LA MISMA FUNCI√ìN BASE
                    datos_polemicos = procesar_articulos_polemicos_UNIFICADO(comentarios_historico)
                    mostrar_tabla_articulos_polemicos(
                        datos_polemicos, 
                        f"hist√≥rico ({titulo_ubicacion})",
                        key_suffix=f"polemicos_{ubicacion_key}_total"
                    )
        
        with tab2:
            st.subheader(f"üëç Comentarios m√°s populares - {titulo_ubicacion}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            with subtab1:
                if mostrar_sentimientos and analizador is not None:
                    df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                        comentarios_mayo_2025, analizador, top_n=20, filtro_popularidad='popular'
                        )
                    mostrar_tabla_comentarios_con_sentimientos(
                        df_comentarios_analizados, 
                        f"Comentarios populares - mayo 2025 ({titulo_ubicacion})",
                        mostrar_sentimientos=True,
                        reporte=reporte
                        )
                else:
                    mostrar_seccion_comentarios_temporal(
                        "üìÖ Mayo 2025",
                        f"Comentarios populares {titulo_ubicacion.lower()} de mayo de 2025",
                        comentarios_mayo_2025,
                        f"mayo de 2025 ({titulo_ubicacion})",
                        procesar_comentarios_populares,
                        lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=True, key_suffix=key_suffix, table_height=table_height),
                        f"populares_{ubicacion_key}_mes"
                    )
            
            with subtab2:
                if mostrar_sentimientos and analizador is not None:
                    df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                        comentarios_anio_2025, analizador, top_n=20, filtro_popularidad='popular'
                        )
                    mostrar_tabla_comentarios_con_sentimientos(
                        df_comentarios_analizados, 
                        f"Comentarios populares - a√±o 2025 ({titulo_ubicacion})",
                        mostrar_sentimientos=True,
                        reporte=reporte
                        )
                else:
                    mostrar_seccion_comentarios_temporal(
                        "üìÜ A√±o 2025",
                        f"Comentarios populares {titulo_ubicacion.lower()} de 2025",
                        comentarios_anio_2025,
                        f"a√±o 2025 ({titulo_ubicacion})",
                        procesar_comentarios_populares,
                        lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=True, key_suffix=key_suffix, table_height=table_height),
                        f"populares_{ubicacion_key}_anio"
                    )
            
            with subtab3:
                if mostrar_sentimientos and analizador is not None:
                    df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                        comentarios_historico, analizador, top_n=20, filtro_popularidad='popular'
                        )
                    mostrar_tabla_comentarios_con_sentimientos(
                        df_comentarios_analizados, 
                        f"Comentarios populares - hist√≥rico ({titulo_ubicacion})",
                        mostrar_sentimientos=True,
                        reporte=reporte
                        )
                else:
                    mostrar_seccion_comentarios_temporal(
                        "üó≥Ô∏è Desde las elecciones locales del 28 de mayo de 2023",
                        f"Todos los comentarios populares hist√≥ricos {titulo_ubicacion.lower()}",
                        comentarios_historico,
                        f"per√≠odo hist√≥rico ({titulo_ubicacion})",
                        procesar_comentarios_populares,
                        lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=True, key_suffix=key_suffix, table_height=table_height),
                        f"populares_{ubicacion_key}_total"
                    )
        
        with tab3:
            st.subheader(f"üëé Comentarios m√°s impopulares - {titulo_ubicacion}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            with subtab1:
                if mostrar_sentimientos and analizador is not None:
                    df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                        comentarios_mayo_2025, analizador, top_n=20, filtro_popularidad='impopular'
                    )
                    mostrar_tabla_comentarios_con_sentimientos(
                        df_comentarios_analizados, 
                        f"Comentarios impopulares - mayo 2025 ({titulo_ubicacion})",
                        mostrar_sentimientos=True,
                        reporte=reporte
                    )
                else:
                    mostrar_seccion_comentarios_temporal(
                        "üìÖ Mayo 2025",
                        f"Comentarios impopulares {titulo_ubicacion.lower()} de mayo de 2025",
                        comentarios_mayo_2025,
                        f"mayo de 2025 ({titulo_ubicacion})",
                        procesar_comentarios_impopulares,
                        lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=False, key_suffix=key_suffix, table_height=table_height),
                        f"impopulares_{ubicacion_key}_mes"
                    )
            
            with subtab2:
                if mostrar_sentimientos and analizador is not None:
                    df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                        comentarios_anio_2025, analizador, top_n=20, filtro_popularidad='impopular'
                    )
                    mostrar_tabla_comentarios_con_sentimientos(
                        df_comentarios_analizados, 
                        f"Comentarios impopulares - a√±o 2025 ({titulo_ubicacion})",
                        mostrar_sentimientos=True,
                        reporte=reporte
                    )
                else:
                    mostrar_seccion_comentarios_temporal(
                        "üìÜ A√±o 2025",
                        f"Comentarios impopulares {titulo_ubicacion.lower()} de 2025",
                        comentarios_anio_2025,
                        f"a√±o 2025 ({titulo_ubicacion})",
                        procesar_comentarios_impopulares,
                        lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=False, key_suffix=key_suffix, table_height=table_height),
                        f"impopulares_{ubicacion_key}_anio"
                    )
            
            with subtab3:
                if mostrar_sentimientos and analizador is not None:
                    df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                        comentarios_historico, analizador, top_n=20, filtro_popularidad='impopular'
                    )
                    mostrar_tabla_comentarios_con_sentimientos(
                        df_comentarios_analizados, 
                        f"Comentarios impopulares - hist√≥rico ({titulo_ubicacion})",
                        mostrar_sentimientos=True,
                        reporte=reporte
                    )
                else:
                    mostrar_seccion_comentarios_temporal(
                        "üó≥Ô∏è Desde las elecciones locales del 28 de mayo de 2023",
                        f"Todos los comentarios impopulares hist√≥ricos {titulo_ubicacion.lower()}",
                        comentarios_historico,
                        f"per√≠odo hist√≥rico ({titulo_ubicacion})",
                        procesar_comentarios_impopulares,
                        lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=False, key_suffix=key_suffix, table_height=table_height),
                        f"impopulares_{ubicacion_key}_total"
                    )
    
    elif tipo_analisis_comentarios == "üó≥Ô∏è Comentarios sobre Partidos Pol√≠ticos":
        filtros_partidos = {
            "Todos los partidos": ("üèõÔ∏è Partidos Pol√≠ticos", filtrar_comentarios_por_partidos_general),
            "üåπPSdeG-PSOE de Mar√≠n": ("üåπ PSdeG-PSOE", filtrar_comentarios_por_psoe),
            "üîµPartido Popular de Mar√≠n": ("üîµ Partido Popular", filtrar_comentarios_por_pp),
            "üåÄBNG - Mar√≠n": ("üåÄ BNG", filtrar_comentarios_por_bng)
        }
        
        titulo_partido, funcion_filtro = filtros_partidos[partido_comentarios]
        
        st.title(f"üí¨ {titulo_ubicacion} - {titulo_partido}")
        st.markdown(f"""
        **An√°lisis de comentarios** {titulo_ubicacion.lower()} que mencionan {partido_comentarios.lower()}
        """)
        
        try:
            with st.spinner("üí¨ Filtrando comentarios pol√≠ticos..."):
                datos_filtrados = funcion_filtro(datos_comentarios["filtered_data"])
                
                if len(datos_filtrados) == 0:
                    st.warning(f"‚ö†Ô∏è No se encontraron comentarios sobre {partido_comentarios} en {titulo_ubicacion}")
                    return
                
                st.success(f"‚úÖ Encontrados {len(datos_filtrados)} art√≠culos con comentarios sobre {partido_comentarios}")
        except Exception as e:
            st.error(f"‚ùå Error filtrando comentarios: {e}")
            return
        
        try:
            comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico = aplicar_filtros_temporales({"filtered_data": datos_filtrados})
        except Exception as e:
            st.error(f"‚ùå Error aplicando filtros temporales: {e}")
            return
        
        tab1, tab2, tab3 = st.tabs(["üî• Art√≠culos pol√©micos", "üëç Comentarios populares", "üëé Comentarios impopulares"])
        
        with tab1:
            st.subheader(f"üî• Art√≠culos m√°s pol√©micos - {titulo_ubicacion} + {partido_comentarios}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            for subtab, datos, periodo in zip([subtab1, subtab2, subtab3], 
                                            [comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico],
                                            ["Mayo 2025", "A√±o 2025", "Hist√≥rico"]):
                with subtab:
                    if mostrar_sentimientos and analizador is not None:
                        # ‚úÖ USAR FUNCI√ìN CON SENTIMIENTOS
                        df_resumido, reporte, df_comentarios_originales = procesar_comentarios_con_sentimientos_directo(
                            datos, analizador, top_n=20, filtro_popularidad=None
                        )
                        mostrar_tabla_articulos_agregados_con_sentimientos(
                            df_resumido, 
                            f"Art√≠culos pol√©micos sobre {partido_comentarios} - {periodo} ({titulo_ubicacion})", 
                            df_comentarios_originales=df_comentarios_originales,
                            reporte=reporte,
                            table_height=300
                        )
                    else:
                        # Versi√≥n sin sentimientos
                        mostrar_seccion_comentarios_temporal(
                            f"üìÖ {periodo}",
                            f"Art√≠culos pol√©micos con comentarios sobre {partido_comentarios}",
                            datos,
                            f"{periodo.lower()} ({titulo_ubicacion} - {partido_comentarios})",
                            procesar_articulos_politicos_polemicos,
                            mostrar_tabla_articulos_polemicos,
                            f"polemicos_{ubicacion_key}_{partido_comentarios.lower().replace(' ', '_')}_{periodo.lower().replace(' ', '_')}",
                            table_height=300
                        )
        
        with tab2:
            st.subheader(f"üëç Comentarios m√°s populares sobre {partido_comentarios}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            for subtab, datos, periodo in zip([subtab1, subtab2, subtab3], 
                                            [comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico],
                                            ["mayo 2025", "a√±o 2025", "hist√≥rico"]):
                with subtab:
                    if mostrar_sentimientos and analizador is not None:
                        df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                            datos, analizador, top_n=20, filtro_popularidad='popular'
                        )
                        mostrar_tabla_comentarios_con_sentimientos(
                            df_comentarios_analizados, 
                            f"Comentarios populares sobre {partido_comentarios} - {periodo} ({titulo_ubicacion})",
                            mostrar_sentimientos=True,
                            reporte=reporte
                        )
                    else:
                        mostrar_seccion_comentarios_temporal(
                            f"üìÖ {periodo.title()}",
                            f"Comentarios populares sobre {partido_comentarios}",
                            datos,
                            f"{periodo} ({titulo_ubicacion} - {partido_comentarios})",
                            procesar_comentarios_politicos_populares,
                            lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=True, key_suffix=key_suffix, table_height=table_height),
                            f"populares_{ubicacion_key}_{partido_comentarios.lower().replace(' ', '_')}_{periodo.replace(' ', '_')}",
                            table_height=300
                        )
        
        with tab3:
            st.subheader(f"üëé Comentarios m√°s impopulares sobre {partido_comentarios}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            for subtab, datos, periodo in zip([subtab1, subtab2, subtab3], 
                                            [comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico],
                                            ["mayo 2025", "a√±o 2025", "hist√≥rico"]):
                with subtab:
                    if mostrar_sentimientos and analizador is not None:
                        df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                            datos, analizador, top_n=20, filtro_popularidad='impopular'
                        )
                        mostrar_tabla_comentarios_con_sentimientos(
                            df_comentarios_analizados, 
                            f"Comentarios impopulares sobre {partido_comentarios} - {periodo} ({titulo_ubicacion})",
                            mostrar_sentimientos=True,
                            reporte=reporte
                        )
                    else:
                        mostrar_seccion_comentarios_temporal(
                            f"üìÖ {periodo.title()}",
                            f"Comentarios impopulares sobre {partido_comentarios}",
                            datos,
                            f"{periodo} ({titulo_ubicacion} - {partido_comentarios})",
                            procesar_comentarios_politicos_impopulares,
                            lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=False, key_suffix=key_suffix, table_height=table_height),
                            f"impopulares_{ubicacion_key}_{partido_comentarios.lower().replace(' ', '_')}_{periodo.replace(' ', '_')}",
                            table_height=300
                        )
    
    elif tipo_analisis_comentarios == "üë• Comentarios sobre Pol√≠ticos Locales":
        filtros_politicos = {
            "Todos los pol√≠ticos": ("üë• Pol√≠ticos Locales", filtrar_comentarios_por_politicos_general),
            "üåπManuel Pazos": ("üåπ Manuel Pazos", filtrar_comentarios_por_manuel_pazos),
            "üîµMar√≠a Ramallo": ("üîµ Mar√≠a Ramallo", filtrar_comentarios_por_maria_ramallo),
            "üåÄLuc√≠a Santos": ("üåÄ Luc√≠a Santos", filtrar_comentarios_por_lucia_santos)
        }
        
        titulo_politico, funcion_filtro = filtros_politicos[politico_comentarios]
        
        st.title(f"üí¨ {titulo_ubicacion} - {titulo_politico}")
        st.markdown(f"""
        **An√°lisis de comentarios** {titulo_ubicacion.lower()} que mencionan {politico_comentarios.lower()}
        """)
        
        try:
            with st.spinner("üí¨ Filtrando comentarios pol√≠ticos..."):
                datos_filtrados = funcion_filtro(datos_comentarios["filtered_data"])
                
                if len(datos_filtrados) == 0:
                    st.warning(f"‚ö†Ô∏è No se encontraron comentarios sobre {politico_comentarios} en {titulo_ubicacion}")
                    return
                
                st.success(f"‚úÖ Encontrados {len(datos_filtrados)} art√≠culos con comentarios sobre {politico_comentarios}")
        except Exception as e:
            st.error(f"‚ùå Error filtrando comentarios: {e}")
            return
        
        try:
            comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico = aplicar_filtros_temporales({"filtered_data": datos_filtrados})
        except Exception as e:
            st.error(f"‚ùå Error aplicando filtros temporales: {e}")
            return
        
        # Usar la misma estructura que partidos pero con pol√≠ticos
        tab1, tab2, tab3 = st.tabs(["üî• Art√≠culos pol√©micos", "üëç Comentarios populares", "üëé Comentarios impopulares"])
        
        with tab1:
            st.subheader(f"üî• Art√≠culos m√°s pol√©micos - {titulo_ubicacion} + {politico_comentarios}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            for subtab, datos, periodo in zip([subtab1, subtab2, subtab3], 
                                            [comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico],
                                            ["Mayo 2025", "A√±o 2025", "Hist√≥rico"]):
                with subtab:
                    if mostrar_sentimientos and analizador is not None:
                        # ‚úÖ USAR FUNCI√ìN CON SENTIMIENTOS
                        df_resumido, reporte, df_comentarios_originales = procesar_comentarios_con_sentimientos_directo(
                            datos, analizador, top_n=20, filtro_popularidad=None
                        )
                        mostrar_tabla_articulos_agregados_con_sentimientos(
                            df_resumido, 
                            f"Art√≠culos pol√©micos sobre {politico_comentarios} - {periodo} ({titulo_ubicacion})", 
                            df_comentarios_originales=df_comentarios_originales,
                            reporte=reporte,
                            table_height=300
                        )
                    else:
                        # Versi√≥n sin sentimientos
                        mostrar_seccion_comentarios_temporal(
                            f"üìÖ {periodo}",
                            f"Art√≠culos pol√©micos con comentarios sobre {politico_comentarios}",
                            datos,
                            f"{periodo.lower()} ({titulo_ubicacion} - {politico_comentarios})",
                            procesar_articulos_politicos_polemicos,
                            mostrar_tabla_articulos_polemicos,
                            f"polemicos_{ubicacion_key}_{politico_comentarios.lower().replace(' ', '_')}_{periodo.lower().replace(' ', '_')}",
                            table_height=300
                        )
        
        with tab2:
            st.subheader(f"üëç Comentarios m√°s populares sobre {politico_comentarios}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            for subtab, datos, periodo in zip([subtab1, subtab2, subtab3], 
                                            [comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico],
                                            ["mayo 2025", "a√±o 2025", "hist√≥rico"]):
                with subtab:
                    if mostrar_sentimientos and analizador is not None:
                        df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                            datos, analizador, top_n=20, filtro_popularidad='popular'
                        )
                        mostrar_tabla_comentarios_con_sentimientos(
                            df_comentarios_analizados, 
                            f"Comentarios populares sobre {politico_comentarios} - {periodo} ({titulo_ubicacion})",
                            mostrar_sentimientos=True,
                            reporte=reporte
                        )
                    else:
                        mostrar_seccion_comentarios_temporal(
                            f"üìÖ {periodo.title()}",
                            f"Comentarios populares sobre {politico_comentarios}",
                            datos,
                            f"{periodo} ({titulo_ubicacion} - {politico_comentarios})",
                            procesar_comentarios_politicos_populares,
                            lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=True, key_suffix=key_suffix, table_height=table_height),
                            f"populares_{ubicacion_key}_{politico_comentarios.lower().replace(' ', '_')}_{periodo.replace(' ', '_')}",
                            table_height=300
                        )
        
        with tab3:
            st.subheader(f"üëé Comentarios m√°s impopulares sobre {politico_comentarios}")
            
            subtab1, subtab2, subtab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
            
            for subtab, datos, periodo in zip([subtab1, subtab2, subtab3], 
                                            [comentarios_mayo_2025, comentarios_anio_2025, comentarios_historico],
                                            ["mayo 2025", "a√±o 2025", "hist√≥rico"]):
                with subtab:
                    if mostrar_sentimientos and analizador is not None:
                        df_comentarios_analizados, reporte = procesar_comentarios_individuales_con_sentimientos(
                            datos, analizador, top_n=20, filtro_popularidad='impopular'
                        )
                        mostrar_tabla_comentarios_con_sentimientos(
                            df_comentarios_analizados, 
                            f"Comentarios impopulares sobre {politico_comentarios} - {periodo} ({titulo_ubicacion})",
                            mostrar_sentimientos=True,
                            reporte=reporte
                        )
                    else:
                        mostrar_seccion_comentarios_temporal(
                            f"üìÖ {periodo.title()}",
                            f"Comentarios impopulares sobre {politico_comentarios}",
                            datos,
                            f"{periodo} ({titulo_ubicacion} - {politico_comentarios})",
                            procesar_comentarios_politicos_impopulares,
                            lambda df, titulo, key_suffix, table_height=600: mostrar_tabla_comentarios(df, titulo, es_popular=False, key_suffix=key_suffix, table_height=table_height),
                            f"impopulares_{ubicacion_key}_{politico_comentarios.lower().replace(' ', '_')}_{periodo.replace(' ', '_')}",
                            table_height=300
                        )

# üé® GESTI√ìN INTELIGENTE DE FONDOS
# Definir qu√© p√°ginas tendr√°n fondos espec√≠ficos
PAGINAS_CON_FONDO_ORIGINAL = [
    "üè† Inicio", 
    "üèòÔ∏è Visi√≥n General del Municipio", 
    "üìû Info. T√©cnica y Contacto"
]

# üé® NUEVA L√ìGICA: Aplicar fondos seg√∫n la p√°gina y opciones seleccionadas
if opcion in PAGINAS_CON_FONDO_ORIGINAL:
    # P√°ginas con fondo original del logotipo
    aplicar_fondo_inicio()

elif opcion == "üìä An√°lisis de Visualizaciones":
    # üé® NUEVA L√ìGICA: Fondos espec√≠ficos para an√°lisis de visualizaciones
    
    fondo_especifico = None
    
    if sub_opcion == "üìà Art√≠culos m√°s Populares":
        fondo_especifico = obtener_fondo_segun_opcion(sub_opcion)
    elif sub_opcion == "üèõÔ∏è Art√≠culos sobre Partidos Pol√≠ticos":
        fondo_especifico = obtener_fondo_segun_opcion(
            sub_opcion, 
            partido_especifico=partido_especifico
        )
    elif sub_opcion == "üë• Art√≠culos sobre Pol√≠ticos Locales":
        fondo_especifico = obtener_fondo_segun_opcion(
            sub_opcion, 
            politico_especifico=politico_especifico
        )
    
    # Aplicar fondo espec√≠fico si est√° definido, sino eliminar fondo
    if fondo_especifico:
        aplicar_fondo_comentarios_especifico(fondo_especifico)
    else:
        eliminar_fondo_inicio()

elif opcion == "üí¨ An√°lisis de Comentarios":
    # üé® L√ìGICA EXISTENTE: Fondos espec√≠ficos para an√°lisis de comentarios
    
    # Obtener nombre del fondo seg√∫n las opciones seleccionadas
    fondo_especifico = None
    
    if tipo_analisis_comentarios == "üìä An√°lisis General":
        fondo_especifico = obtener_fondo_segun_opcion(tipo_analisis_comentarios)
    elif tipo_analisis_comentarios == "üó≥Ô∏è Comentarios sobre Partidos Pol√≠ticos":
        fondo_especifico = obtener_fondo_segun_opcion(
            tipo_analisis_comentarios, 
            partido_especifico=partido_comentarios
        )
    elif tipo_analisis_comentarios == "üë• Comentarios sobre Pol√≠ticos Locales":
        fondo_especifico = obtener_fondo_segun_opcion(
            tipo_analisis_comentarios, 
            politico_especifico=politico_comentarios
        )
    
    # Aplicar fondo espec√≠fico si est√° definido, sino eliminar fondo
    if fondo_especifico:
        aplicar_fondo_comentarios_especifico(fondo_especifico)
    else:
        eliminar_fondo_inicio()
        
else:
    # Otras p√°ginas sin fondo especial
    eliminar_fondo_inicio()

# Contenido principal seg√∫n la opci√≥n seleccionada
if opcion == "üè† Inicio":

    st.markdown("""
    ### ¬øQu√© es üèõÔ∏è**HorizontAI**üèõÔ∏è?
                
    **HorizontAI** es una herramienta de an√°lisis pol√≠tico centrada en municipios peque√±os y medianos
    que utiliza **inteligencia artificial emocional** para analizar visualizaciones y comentarios 
    ciudadanos en medios de comunicaci√≥n locales. Esto proporciona una visi√≥n profunda de la opini√≥n p√∫blica
    y ayuda a dise√±ar campa√±as efectivas.
                
    **HorizontAI** ha sido **dise√±ada para** ayudar a los pol√≠ticos de hoy a ser **los l√≠deres del ma√±ana.**
    """)

    st.divider()
    st.markdown("### üìö Informaci√≥n T√©cnica üìö")
    st.info("""
    **Si quieres conocer m√°s detalles t√©cnicos** sobre el funcionamiento del sistema, ve a la pesta√±a

     **üìû Info. T√©cnica y Contacto**
    """)  

    st.divider()
        
    # Mostrar estado del analizador
    col1, col2 = st.columns([3, 1])

    with col1:
        st.markdown("### üìä Estado del Sistema üìä")
        if SENTIMENTS_AVAILABLE:
            st.success("""
            ‚úÖ **Sistema Completo Operativo**
            
            üß† IA Emocional: Activa
            üåç Detecci√≥n de Idioma: Activa  
            üé≠ An√°lisis Granular: Activo
            üìä M√©tricas: Disponibles
            üí¨ Comentarios: Disponibles
            """)
        else:
            st.warning("‚ö†Ô∏è **An√°lisis de Sentimientos**: ‚ùå No disponible")
            st.caption("üîß Revisa que el archivo advanced_sentiment_analyzer.py est√© presente")

    with col2:
        
        if SENTIMENTS_AVAILABLE:
            pass
        else:
            st.warning("""
            ‚ö†Ô∏è **Sistema Parcialmente Operativo**
            
            üìä M√©tricas: Disponibles
            üí¨ Comentarios: Disponibles
            üß† IA Emocional: No disponible
            """)

elif opcion == "üèòÔ∏è Visi√≥n General del Municipio":

    st.title("‚õ™Visi√≥n General de Mar√≠n‚õ™")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader('Informaci√≥n general')
        st.markdown("""
        **üìç Municipio:** Mar√≠n, Pontevedra  
        **üë• Poblaci√≥n:** ~25.000 habitantes  
        **üèòÔ∏è Comarca:** O Morrazo  
        **üåç Provincia:** Pontevedra, Galicia  
        **‚öì Caracter√≠sticas:** Villa marinera con tradici√≥n naval
        """)
        
        st.markdown("""
        **√öltimas elecciones:** 28 de mayo de 2023  
        **Pr√≥ximas elecciones:** 2027  
        **Reparto de concejal√≠as en 2023:** üîµ 12 PP / üî¥ 5 PSOE / üåÄ 4 BNG<br>
        **Reparto de concejal√≠as en 2019:** üîµ 15 PP / üî¥ 5 PSOE / üåÄ 1 BNG
        """, unsafe_allow_html=True)

    with col2:
        st.subheader("Panorama Pol√≠tico")
        st.markdown("""
        **Principales partidos activos:**
        - üåπ **PSdeG-PSOE Mar√≠n**: Partido Socialista de Galicia - Partido Socialista Obrero Espa√±ol
        - üîµ **PP de Mar√≠n**: Partido Popular
        - üåÄ **BNG - Mar√≠n**: Bloque Nacionalista Galego
        
        **Pol√≠ticos locales relevantes:**
        - üîµ **Mar√≠a Ramallo**: Alcaldesa de Mar√≠n, PP
        - üåπ **Manuel Pazos**: Secretario Local PSdeG-PSOE Mar√≠n 
        - üåÄ **Luc√≠a Santos**: Secretaria Local BNG Mar√≠n
        """)

    st.markdown("""
        <h3 style='text-align: left; color: white;'>
        üó∫Ô∏è Entorno pol√≠tico de Mar√≠n üó∫Ô∏è
        </h3>
        """, unsafe_allow_html=True)


    st.components.v1.html(
        '''
        <div style="min-height:550px; color-scheme: dark;" id="datawrapper-vis-9YDQ6">
        <script type="text/javascript" defer 
            src="https://datawrapper.dwcdn.net/9YDQ6/embed.js" 
            charset="utf-8" 
            data-target="#datawrapper-vis-9YDQ6"
            data-dark="true">
        </script>
        <noscript><img src="https://datawrapper.dwcdn.net/9YDQ6/full.png" alt="" /></noscript>
        </div>
        ''',
        height=800
    )

    st.components.v1.html(
        '''
        <div style="min-height:559px; color-scheme: dark;" id="datawrapper-vis-Qql67">
        <script type="text/javascript" defer 
            src="https://datawrapper.dwcdn.net/Qql67/embed.js" 
            charset="utf-8"
            data-target="#datawrapper-vis-Qql67"
            data-dark="true">
        </script>
        <noscript><img src="https://datawrapper.dwcdn.net/Qql67/full.png" alt="" /></noscript>
        </div>
        ''',
        height=600
    )

    st.components.v1.html(
        '''
    <div style="min-height:416px; color-scheme: dark;" id="datawrapper-vis-AOYpH">
    <script type="text/javascript" defer 
        src="https://datawrapper.dwcdn.net/AOYpH/embed.js" 
        charset="utf-8" 
        data-target="#datawrapper-vis-AOYpH"
        data-dark="true">
    </script>
    <noscript><img src="https://datawrapper.dwcdn.net/AOYpH/full.png" alt="" /></noscript>
    </div>
        ''',
        height=450
    )

elif opcion == "üìä An√°lisis de Visualizaciones":
    try:
        with st.spinner("üìä Cargando m√©tricas de visualizaci√≥n..."):
            metricas = cargar_metricas()
    except Exception as e:
        st.error(f"‚ùå Error cargando m√©tricas: {e}")
        st.stop()
    
    if mostrar_sentimientos:
        st.success("üß† **An√°lisis avanzado de sentimientos y emociones activado**")

        st.info("""
        ‚ÜñÔ∏è **Para visualizar mejor todas las columnas del an√°lisis, cierra el men√∫ principal**.
        """)
            
    if sub_opcion == "üìà Art√≠culos m√°s Populares":
        st.title("üìà Art√≠culos m√°s Populares")
        st.markdown("**Top 20 art√≠culos con mayor n√∫mero de visualizaciones** (todas las tem√°ticas)")
        
        tab1, tab2, tab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
        
        with tab1:
            mostrar_seccion_temporal(
                "üìÖ Mayo 2025",
                "Art√≠culos publicados en mayo de 2025",
                metricas["top10_vis"]["mes"],
                "mayo de 2025",
                mostrar_sentimientos,
                analizador,
                es_articulos_populares=True
            )
        
        with tab2:
            mostrar_seccion_temporal(
                "üìÜ A√±o 2025",
                "Art√≠culos publicados en 2025",
                metricas["top10_vis"]["anio"],
                "a√±o 2025",
                mostrar_sentimientos,
                analizador,
                es_articulos_populares=True
            )
        
        with tab3:
            mostrar_seccion_temporal(
                "üó≥Ô∏è Desde las elecciones locales del 28 de mayo de 2023",
                "Todos los art√≠culos hist√≥ricos ordenados por popularidad",
                metricas["top10_vis"]["total"],
                "per√≠odo hist√≥rico",
                mostrar_sentimientos,
                analizador,
                es_articulos_populares=True
            )

    elif sub_opcion == "üèõÔ∏è Art√≠culos sobre Partidos Pol√≠ticos":
        mapeo_partidos = {
            "Todos los partidos": ("üèõÔ∏è Art√≠culos sobre Partidos Pol√≠ticos üèõÔ∏è", "Top 10 art√≠culos que mencionan **PP, PSOE, BNG**", metricas["top10_partidos"]),
            "üåπPSdeG-PSOE de Mar√≠n": ("üåπ PSdeG-PSOE Mar√≠n üåπ", "Top 10 art√≠culos que mencionan **PSOE o Partido Socialista**", metricas["top10_psoe"]),
            "üîµPartido Popular de Mar√≠n": ("üîµ Partido Popular de Mar√≠n üîµ", "Top 10 art√≠culos que mencionan **PP o Partido Popular**", metricas["top10_pp"]),
            "üåÄBNG - Mar√≠n": ("üåÄ BNG - Mar√≠n üåÄ", "Top 10 art√≠culos que mencionan **BNG o Bloque**", metricas["top10_bng"])
        }
        
        titulo, descripcion, datos = mapeo_partidos[partido_especifico]
        st.title(titulo)
        st.markdown(f"{descripcion}\n\nüìä Los art√≠culos se filtran por menciones espec√≠ficas del partido.")
        
        tab1, tab2, tab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
        
        with tab1:
            mostrar_seccion_temporal("üìÖ Mayo 2025", f"Art√≠culos sobre {partido_especifico} publicados en mayo de 2025", datos["mes"], "mayo de 2025", mostrar_sentimientos, analizador, es_articulos_populares=False)
        
        with tab2:
            mostrar_seccion_temporal("üìÜ A√±o 2025", f"Art√≠culos sobre {partido_especifico} publicados en 2025", datos["anio"], "a√±o 2025", mostrar_sentimientos, analizador, es_articulos_populares=False)
        
        with tab3:
            mostrar_seccion_temporal("üó≥Ô∏è Desde las elecciones locales del 28 de mayo de 2023", f"Todos los art√≠culos sobre {partido_especifico} hist√≥ricos", datos["total"], "per√≠odo hist√≥rico", mostrar_sentimientos, analizador, es_articulos_populares=False)

    elif sub_opcion == "üë• Art√≠culos sobre Pol√≠ticos Locales":
        mapeo_politicos = {
            "Todos los pol√≠ticos": ("üë• Art√≠culos sobre Pol√≠ticos Locales üë•", "Top 10 art√≠culos que mencionan **Pazos, Ramallo, Santos**", metricas["top10_politicos"]),
            "üåπManuel Pazos": ("üåπ Manuel Pazos üåπ", "Top 10 art√≠culos que mencionan **Manuel Pazos**", metricas["top10_manuel"]),
            "üîµMar√≠a Ramallo": ("üîµ Mar√≠a Ramallo üîµ", "Top 10 art√≠culos que mencionan **Mar√≠a Ramallo o Ramallo**", metricas["top10_maria"]),
            "üåÄLuc√≠a Santos": ("üåÄ Luc√≠a Santos üåÄ", "Top 10 art√≠culos que mencionan **Luc√≠a Santos**", metricas["top10_lucia"])
        }
        
        titulo, descripcion, datos = mapeo_politicos[politico_especifico]
        st.title(titulo)
        st.markdown(f"{descripcion}\n\nüìä Los art√≠culos se filtran por menciones espec√≠ficas del pol√≠tico.")
        
        tab1, tab2, tab3 = st.tabs(["üìÖ √öltimo mes", "üìÜ A√±o en curso", "üó≥Ô∏è Desde elecciones 2023"])
        
        with tab1:
            mostrar_seccion_temporal("üìÖ Mayo 2025", f"Art√≠culos sobre {politico_especifico} publicados en mayo de 2025", datos["mes"], "mayo de 2025", mostrar_sentimientos, analizador, es_articulos_populares=False)
        
        with tab2:
            mostrar_seccion_temporal("üìÜ A√±o 2025", f"Art√≠culos sobre {politico_especifico} publicados en 2025", datos["anio"], "a√±o 2025", mostrar_sentimientos, analizador, es_articulos_populares=False)
        
        with tab3:
            mostrar_seccion_temporal("üó≥Ô∏è Desde las elecciones locales del 28 de mayo de 2023", f"Todos los art√≠culos sobre {politico_especifico} hist√≥ricos", datos["total"], "per√≠odo hist√≥rico", mostrar_sentimientos, analizador, es_articulos_populares=False)

elif opcion == "üí¨ An√°lisis de Comentarios":
    if ubicacion_comentarios == "üåç Comentarios Globales":
        try:
            datos_comentarios = cargar_datos_comentarios()
            mostrar_analisis_comentarios_con_filtros(datos_comentarios, "Comentarios Globales", "global", mostrar_sentimientos, analizador, tipo_analisis_comentarios, partido_comentarios, politico_comentarios)
        except Exception as e:
            st.error(f"‚ùå Error cargando datos de comentarios globales: {e}")
            
    elif ubicacion_comentarios == "üèõÔ∏è Comentarios de O Morrazo y Pontevedra":
        try:
            datos_comentarios = cargar_datos_comentarios_morrazo()
            mostrar_analisis_comentarios_con_filtros(datos_comentarios, "O Morrazo y Pontevedra", "morrazo", mostrar_sentimientos, analizador, tipo_analisis_comentarios, partido_comentarios, politico_comentarios)
        except Exception as e:
            st.error(f"‚ùå Error cargando datos de comentarios de O Morrazo: {e}")
            
    elif ubicacion_comentarios == "üìç Comentarios de Mar√≠n":
        try:
            datos_comentarios = cargar_datos_comentarios_marin()
            mostrar_analisis_comentarios_con_filtros(datos_comentarios, "Mar√≠n", "marin", mostrar_sentimientos, analizador, tipo_analisis_comentarios, partido_comentarios, politico_comentarios)
        except Exception as e:
            st.error(f"‚ùå Error cargando datos de comentarios de Mar√≠n: {e}")

elif opcion == "üìû Info. T√©cnica y Contacto":
    st.title("üìß Informaci√≥n y Contacto üìß")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üõ†Ô∏è Informaci√≥n T√©cnica")
        st.markdown("""
        **Desarrollado con:**
        - üìä **VisualStudio**: Entorno de desarrollo
        - üêç **Python 3.12.9**: Lenguaje principal
        - üéà **Streamlit**: Framework de interfaz web
        - üí¨ **DataWrapper**: Estad√≠sticas municipales b√°sicas
        - ‚öôÔ∏è **Sistemas de IA utilizados**: Analizadores BETO y Bertinho, Transformers, NLTK
        """)
            
    with col2:
        st.subheader("üìß Soporte y Contacto")
        st.markdown("""
        **Para consultas y sugerencias:**
        
        - üåå **Creador y Desarrollador**: **Jaime Rodr√≠guez**
        - üåê **Proyecto original para**: **Evolve Academy** 
        - üìß **Email**: jairod.programar@gmail.com
        - üì± **GitHub**: github.com/jairod1  
        - üìã **LinkedIn**: https://www.linkedin.com/in/jaime-rodr√≠guez-gonz√°lez-a54526205/
        """)

    st.divider()

    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        #### üìä Funciones Principales:
        
        - **üß† An√°lisis Pol√≠tico**: Presentaci√≥n pol√≠tica b√°sica de tu localidad  
        - **üìà M√©tricas de Visualizaci√≥n**: Los art√≠culos m√°s le√≠dos y con m√°s impacto sobre ciudadan√≠as locales
        - **üìã Estad√≠sticas de Sentimientos**: Gr√°ficos y estad√≠sticas en funcion de los sentimientos y visualizaciones
        - **üîç Filtros Avanzados**: Filtros de comentarios por t√©rminos pol√≠ticos espec√≠ficos (partidos y personas)
        - **üó∫Ô∏è An√°lisis Geogr√°fico**: Comentarios globales, de O Morrazo/Pontevedra y espec√≠ficos de Mar√≠n
        - **üî¢ Datos de Prueba**: Tomados de la localidad de Mar√≠n, Pontevedra, Galicia
        """)

    with col2:      
        if SENTIMENTS_AVAILABLE:
            st.markdown("""
            #### üß† An√°lisis Avanzado con IA Emocional:
            
            - **üåç Detecci√≥n de Idioma**: Reconoce gallego y castellano
            - **üòä Tono General**: Clasifica como positivo, negativo o neutral
            - **üé≠ Emociones Granulares**: Detecta 10 emociones espec√≠ficas
            - **üî• Intensidad Emocional**: Escala del 1 (menos intenso) al 5
            - **üìÇ Clasificaci√≥n Tem√°tica**: 9 categor√≠as de contenido
            """)

    # üîß NUEVA SECCI√ìN: Explicaci√≥n de par√°metros del an√°lisis
    st.divider()
    mostrar_explicacion_parametros()

# Footer
st.divider()

footer_col1, footer_col2, footer_col3 = st.columns([2, 1, 1])

with footer_col1:
    if SENTIMENTS_AVAILABLE:
        st.caption("üèõÔ∏è **HorizontAI** - An√°lisis Pol√≠tico Local con IA Emocional | üß† Sistema Avanzado Operativo")
    else:
        st.caption("üèõÔ∏è **HorizontAI** - An√°lisis Pol√≠tico Local | ‚ö†Ô∏è Sistema Base Operativo")

with footer_col2:
    st.caption("üìä Datos actualizados autom√°ticamente")

with footer_col3:
    st.caption("üó∫Ô∏è Gallego + Castellano + An√°lisis Geogr√°fico")

if SENTIMENTS_AVAILABLE:
    estado_analizador = "üß† Cargado" if st.session_state.analizador_global is not None else "üí§ En espera"
    st.caption(f"‚úÖ **Estado**: Todos los sistemas operativos | üé≠ **Emociones**: 10 tipos | üåç **Idiomas**: 2 | üìÇ **Tem√°ticas**: 9 | üó∫Ô∏è **An√°lisis**: Global + O Morrazo + Mar√≠n | {estado_analizador}")
else:
    st.caption("‚ö†Ô∏è **Estado**: Sistema parcial | üìä M√©tricas: S√≠ | üí¨ Comentarios: S√≠ | üß† IA: No | üó∫Ô∏è An√°lisis: Global + O Morrazo + Mar√≠n")